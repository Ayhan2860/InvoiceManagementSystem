// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataAccess.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    partial class InvoiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("NationalyId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BlockName")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfHousesOnTheFloors")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockName = "A Block",
                            NumberOfFloors = 10,
                            NumberOfHousesOnTheFloors = 3
                        },
                        new
                        {
                            Id = 2,
                            BlockName = "B Block",
                            NumberOfFloors = 10,
                            NumberOfHousesOnTheFloors = 3
                        },
                        new
                        {
                            Id = 3,
                            BlockName = "C Block",
                            NumberOfFloors = 10,
                            NumberOfHousesOnTheFloors = 3
                        },
                        new
                        {
                            Id = 4,
                            BlockName = "D Block",
                            NumberOfFloors = 10,
                            NumberOfHousesOnTheFloors = 3
                        },
                        new
                        {
                            Id = 5,
                            BlockName = "E Block",
                            NumberOfFloors = 10,
                            NumberOfHousesOnTheFloors = 3
                        });
                });

            modelBuilder.Entity("Entities.Concrete.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("integer");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeInfo")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Entities.Concrete.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InvocingDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InvoiceGenreId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastPaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("InvoiceGenreId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Entities.Concrete.InvoiceGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InvoiceGenres");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.HasBaseType("Core.Entities.Concrete.Person");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "manager",
                            NationalyId = "00000000000",
                            PhoneNumber = "02122323232",
                            PasswordHash = new byte[] { 119, 191, 255, 165, 188, 192, 219, 44, 118, 177, 56, 74, 137, 126, 20, 15, 14, 150, 113, 140, 215, 156, 107, 116, 201, 154, 5, 185, 198, 199, 131, 59, 104, 206, 157, 168, 95, 107, 214, 243, 162, 29, 235, 73, 249, 45, 245, 234, 202, 137, 117, 87, 12, 208, 58, 2, 16, 18, 74, 71, 32, 15, 121, 158 },
                            PasswordSalt = new byte[] { 70, 247, 33, 62, 164, 242, 157, 20, 32, 25, 251, 159, 246, 87, 179, 123, 152, 27, 26, 186, 231, 157, 201, 68, 47, 226, 186, 142, 146, 213, 88, 64, 14, 231, 80, 88, 40, 8, 113, 139, 75, 66, 0, 81, 102, 112, 226, 144, 183, 179, 19, 84, 184, 45, 13, 123, 29, 131, 204, 156, 63, 169, 222, 71, 208, 45, 28, 209, 226, 9, 214, 60, 189, 75, 83, 0, 27, 108, 198, 204, 73, 203, 254, 82, 123, 142, 118, 122, 221, 165, 159, 174, 17, 75, 160, 130, 112, 204, 101, 233, 70, 25, 166, 20, 169, 203, 144, 196, 221, 94, 200, 226, 14, 219, 197, 35, 229, 191, 72, 43, 157, 230, 242, 203, 169, 2, 86, 241 }
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Invoice", b =>
                {
                    b.HasOne("Entities.Concrete.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.InvoiceGenre", "InvoiceGenre")
                        .WithMany()
                        .HasForeignKey("InvoiceGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("InvoiceGenre");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Person", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Concrete.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
