// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataAccess.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    [Migration("20220907140550_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("NationalyId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BlockName")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfHousesOnTheFloors")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("Entities.Concrete.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("integer");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeInfo")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Entities.Concrete.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InvocingDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InvoiceGenreId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastPaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("InvoiceGenreId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Entities.Concrete.InvoiceGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InvoiceGenres");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.HasBaseType("Core.Entities.Concrete.Person");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "manager",
                            NationalyId = "00000000000",
                            PhoneNumber = "02122323232",
                            PasswordHash = new byte[] { 97, 72, 236, 21, 70, 236, 228, 36, 40, 227, 37, 6, 245, 202, 208, 2, 201, 235, 160, 57, 8, 177, 157, 254, 53, 196, 250, 7, 37, 46, 154, 215, 197, 165, 105, 62, 131, 56, 10, 29, 50, 52, 159, 145, 22, 47, 150, 91, 40, 152, 104, 125, 159, 74, 91, 58, 236, 92, 234, 23, 77, 173, 91, 157 },
                            PasswordSalt = new byte[] { 48, 230, 222, 154, 121, 211, 157, 134, 225, 13, 234, 82, 84, 157, 121, 232, 74, 50, 254, 24, 250, 105, 42, 242, 224, 127, 15, 237, 154, 32, 190, 162, 78, 26, 31, 212, 203, 185, 129, 254, 121, 16, 161, 164, 121, 79, 2, 221, 203, 72, 196, 121, 50, 62, 210, 24, 212, 54, 230, 20, 106, 189, 76, 72, 6, 168, 149, 79, 151, 106, 79, 162, 27, 109, 235, 221, 4, 237, 236, 161, 124, 255, 194, 40, 253, 94, 252, 254, 10, 210, 125, 92, 108, 76, 36, 151, 217, 127, 184, 50, 117, 195, 46, 252, 69, 225, 178, 223, 201, 159, 184, 120, 113, 206, 47, 244, 142, 183, 224, 208, 138, 79, 208, 91, 167, 100, 25, 170 }
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Invoice", b =>
                {
                    b.HasOne("Entities.Concrete.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.InvoiceGenre", "InvoiceGenre")
                        .WithMany()
                        .HasForeignKey("InvoiceGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("InvoiceGenre");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Person", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Concrete.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
